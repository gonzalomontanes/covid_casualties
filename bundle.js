(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  //const csvUrl =
  //  'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/02be34e5ec0409835f79f61a547b2b42f2c6dfd7/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv';

  const csvUrl =
    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const sum = (accumulator, currentValue) => accumulator + currentValue;

  const parseDay = d3.timeParse('%m/%d/%y');

  const transform = rawData => {
    const days = rawData.columns.slice(4);
    return days.map(day => ({
      date: parseDay(day),
      deathTotal: rawData.map(d => +d[day]).reduce(sum, 0)
    }));
  };

  const useData = () => {
    const [data, setData] = React$1.useState();
    
    React$1.useEffect(() => {
      d3.csv(csvUrl).then(rawData => {
        setData(transform(rawData));
      });
    }, []);

    return data;
  };

  const XAxis = ({ xScale, innerHeight }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const xAxisG = d3.select(ref.current);
      const xAxis = d3.axisBottom(xScale)
        .tickSize(-innerHeight)
        .tickPadding(18);
      xAxisG.call(xAxis);
    }, []);
    return React.createElement( 'g', { transform: `translate(0,${innerHeight})`, ref: ref });
  };

  const YAxis = ({ yScale, innerWidth }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const yAxisG = d3.select(ref.current);
      const yAxis = d3.axisLeft(yScale)
        .tickSize(-innerWidth)
        .tickPadding(3)
        .ticks(10, "~s");
        //.tickFormat((tickValue) => tickValue);
      yAxisG.call(yAxis);
    }, []);
    return React.createElement( 'g', { ref: ref });
  };

  const xValue = d => d.date;
  const yValue = d => d.deathTotal;

  const margin = { top: 50, right: 40, bottom: 80, left: 100 };

  const formatDate = d3.timeFormat('%b %d');

  const LineChart = ({ data, width, height }) => {
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);

    const yScale = d3.scaleLog()
      .domain([1, d3.max(data, yValue)])
      .range([innerHeight, 0]);

    const lineGenerator = d3.line()
      .x(d => xScale(xValue(d)))
      .y(d => yScale(yValue(d)));

    const mostRecentDate = xScale.domain()[1];

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( XAxis, { xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( YAxis, { yScale: yScale, innerWidth: innerWidth }),
          React$1__default.createElement( 'path', { d: lineGenerator(data) }),
          React$1__default.createElement( 'text', { transform: `translate(${innerWidth / 2},-10)`, 'text-anchor': "middle" }, "Global Coronavirus Deaths Over Time"),
          React$1__default.createElement( 'text', {
            className: "axis-label", transform: `translate(-40,${innerHeight / 2}) rotate(-90)`, 'text-anchor': "middle" }, "Cumulative Deaths"),
          React$1__default.createElement( 'text', {
            className: "axis-label", 'text-anchor': "middle", 'alignment-baseline': "hanging", transform: `translate(${innerWidth / 2},${innerHeight + 40})` }, "Time")
        )
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;

  const App = () => {
    const data = useData();
    return data
      ? React$1__default.createElement( LineChart, { data: data, width: width, height: height })
      : React$1__default.createElement( 'div', null, "Loading..." );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZURhdGEuanMiLCJYQXhpcy5qcyIsIllBeGlzLmpzIiwiTGluZUNoYXJ0LmpzIiwiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzdiwgdGltZVBhcnNlIH0gZnJvbSAnZDMnO1xuXG4vL2NvbnN0IGNzdlVybCA9XG4vLyAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9DU1NFR0lTYW5kRGF0YS9DT1ZJRC0xOS8wMmJlMzRlNWVjMDQwOTgzNWY3OWY2MWE1NDdiMmI0MmYyYzZkZmQ3L2Nzc2VfY292aWRfMTlfZGF0YS9jc3NlX2NvdmlkXzE5X3RpbWVfc2VyaWVzL3RpbWVfc2VyaWVzXzE5LWNvdmlkLURlYXRocy5jc3YnO1xuXG5jb25zdCBjc3ZVcmwgPVxuICAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0NTU0VHSVNhbmREYXRhL0NPVklELTE5L21hc3Rlci9jc3NlX2NvdmlkXzE5X2RhdGEvY3NzZV9jb3ZpZF8xOV90aW1lX3Nlcmllcy90aW1lX3Nlcmllc19jb3ZpZDE5X2RlYXRoc19nbG9iYWwuY3N2JztcblxuY29uc3Qgc3VtID0gKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUpID0+IGFjY3VtdWxhdG9yICsgY3VycmVudFZhbHVlO1xuXG5jb25zdCBwYXJzZURheSA9IHRpbWVQYXJzZSgnJW0vJWQvJXknKTtcblxuY29uc3QgdHJhbnNmb3JtID0gcmF3RGF0YSA9PiB7XG4gIGNvbnN0IGRheXMgPSByYXdEYXRhLmNvbHVtbnMuc2xpY2UoNCk7XG4gIHJldHVybiBkYXlzLm1hcChkYXkgPT4gKHtcbiAgICBkYXRlOiBwYXJzZURheShkYXkpLFxuICAgIGRlYXRoVG90YWw6IHJhd0RhdGEubWFwKGQgPT4gK2RbZGF5XSkucmVkdWNlKHN1bSwgMClcbiAgfSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKCk7XG4gIFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNzdihjc3ZVcmwpLnRoZW4ocmF3RGF0YSA9PiB7XG4gICAgICBzZXREYXRhKHRyYW5zZm9ybShyYXdEYXRhKSk7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCJpbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHNlbGVjdCwgYXhpc0JvdHRvbSB9IGZyb20gJ2QzJztcblxuZXhwb3J0IGNvbnN0IFhBeGlzID0gKHsgeFNjYWxlLCBpbm5lckhlaWdodCB9KSA9PiB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHhBeGlzRyA9IHNlbGVjdChyZWYuY3VycmVudCk7XG4gICAgY29uc3QgeEF4aXMgPSBheGlzQm90dG9tKHhTY2FsZSlcbiAgICAgIC50aWNrU2l6ZSgtaW5uZXJIZWlnaHQpXG4gICAgICAudGlja1BhZGRpbmcoMTgpO1xuICAgIHhBeGlzRy5jYWxsKHhBeGlzKTtcbiAgfSwgW10pO1xuICByZXR1cm4gPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYH0gcmVmPXtyZWZ9IC8+O1xufTtcbiIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc2VsZWN0LCBheGlzTGVmdCB9IGZyb20gJ2QzJztcblxuZXhwb3J0IGNvbnN0IFlBeGlzID0gKHsgeVNjYWxlLCBpbm5lcldpZHRoIH0pID0+IHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgeUF4aXNHID0gc2VsZWN0KHJlZi5jdXJyZW50KTtcbiAgICBjb25zdCB5QXhpcyA9IGF4aXNMZWZ0KHlTY2FsZSlcbiAgICAgIC50aWNrU2l6ZSgtaW5uZXJXaWR0aClcbiAgICAgIC50aWNrUGFkZGluZygzKVxuICAgICAgLnRpY2tzKDEwLCBcIn5zXCIpXG4gICAgICAvLy50aWNrRm9ybWF0KCh0aWNrVmFsdWUpID0+IHRpY2tWYWx1ZSk7XG4gICAgeUF4aXNHLmNhbGwoeUF4aXMpO1xuICB9LCBbXSk7XG4gIHJldHVybiA8ZyByZWY9e3JlZn0gLz47XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHNjYWxlVGltZSwgZXh0ZW50LCBzY2FsZUxvZywgbWF4LCBsaW5lLCB0aW1lRm9ybWF0IH0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgWEF4aXMgfSBmcm9tICcuL1hBeGlzJztcbmltcG9ydCB7IFlBeGlzIH0gZnJvbSAnLi9ZQXhpcyc7XG5cbmNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5kYXRlO1xuY29uc3QgeVZhbHVlID0gZCA9PiBkLmRlYXRoVG90YWw7XG5cbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiA1MCwgcmlnaHQ6IDQwLCBib3R0b206IDgwLCBsZWZ0OiAxMDAgfTtcblxuY29uc3QgZm9ybWF0RGF0ZSA9IHRpbWVGb3JtYXQoJyViICVkJyk7XG5cbmV4cG9ydCBjb25zdCBMaW5lQ2hhcnQgPSAoeyBkYXRhLCB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgY29uc3QgeFNjYWxlID0gc2NhbGVUaW1lKClcbiAgICAuZG9tYWluKGV4dGVudChkYXRhLCB4VmFsdWUpKVxuICAgIC5yYW5nZShbMCwgaW5uZXJXaWR0aF0pO1xuXG4gIGNvbnN0IHlTY2FsZSA9IHNjYWxlTG9nKClcbiAgICAuZG9tYWluKFsxLCBtYXgoZGF0YSwgeVZhbHVlKV0pXG4gICAgLnJhbmdlKFtpbm5lckhlaWdodCwgMF0pO1xuXG4gIGNvbnN0IGxpbmVHZW5lcmF0b3IgPSBsaW5lKClcbiAgICAueChkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgIC55KGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpO1xuXG4gIGNvbnN0IG1vc3RSZWNlbnREYXRlID0geFNjYWxlLmRvbWFpbigpWzFdO1xuXG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICAgIDxnIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWB9PlxuICAgICAgICA8WEF4aXMgeFNjYWxlPXt4U2NhbGV9IGlubmVySGVpZ2h0PXtpbm5lckhlaWdodH0gLz5cbiAgICAgICAgPFlBeGlzIHlTY2FsZT17eVNjYWxlfSBpbm5lcldpZHRoPXtpbm5lcldpZHRofSAvPlxuICAgICAgICA8cGF0aCBkPXtsaW5lR2VuZXJhdG9yKGRhdGEpfSAvPlxuICAgICAgICA8dGV4dCB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHtpbm5lcldpZHRoIC8gMn0sLTEwKWB9IHRleHQtYW5jaG9yPVwibWlkZGxlXCI+XG4gICAgICAgICAgR2xvYmFsIENvcm9uYXZpcnVzIERlYXRocyBPdmVyIFRpbWVcbiAgICAgICAgPC90ZXh0PlxuICAgICAgICA8dGV4dFxuICAgICAgICAgIGNsYXNzTmFtZT1cImF4aXMtbGFiZWxcIlxuICAgICAgICAgIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgtNDAsJHtpbm5lckhlaWdodCAvIDJ9KSByb3RhdGUoLTkwKWB9XG4gICAgICAgICAgdGV4dC1hbmNob3I9XCJtaWRkbGVcIlxuICAgICAgICA+XG4gICAgICAgICAgQ3VtdWxhdGl2ZSBEZWF0aHNcbiAgICAgICAgPC90ZXh0PlxuICAgICAgICA8dGV4dFxuICAgICAgICAgIGNsYXNzTmFtZT1cImF4aXMtbGFiZWxcIlxuICAgICAgICAgIHRleHQtYW5jaG9yPVwibWlkZGxlXCJcbiAgICAgICAgICBhbGlnbm1lbnQtYmFzZWxpbmU9XCJoYW5naW5nXCJcbiAgICAgICAgICB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHtpbm5lcldpZHRoIC8gMn0sJHtpbm5lckhlaWdodCArIDQwfSlgfVxuICAgICAgICA+XG4gICAgICAgICAgVGltZVxuICAgICAgICA8L3RleHQ+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICdkMyc7XG5pbXBvcnQgeyB1c2VEYXRhIH0gZnJvbSAnLi91c2VEYXRhJztcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJy4vTGluZUNoYXJ0JztcblxuY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbmNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICBjb25zdCBkYXRhID0gdXNlRGF0YSgpO1xuICByZXR1cm4gZGF0YVxuICAgID8gPExpbmVDaGFydCBkYXRhPXtkYXRhfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuICAgIDogPGRpdj5Mb2FkaW5nLi4uPC9kaXY+O1xufTtcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIHJvb3RFbGVtZW50KTtcbiJdLCJuYW1lcyI6WyJ0aW1lUGFyc2UiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNzdiIsInVzZVJlZiIsInNlbGVjdCIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsInRpbWVGb3JtYXQiLCJzY2FsZVRpbWUiLCJleHRlbnQiLCJzY2FsZUxvZyIsIm1heCIsImxpbmUiLCJSZWFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0VBR0E7RUFDQTtBQUNBO0VBQ0Es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
